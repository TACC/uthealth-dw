# Package installs/loading
if (!require("pacman")) install.packages("pacman")
pacman::p_load(DBI, odbc, rstudioapi, keyring, openxlsx, tidyverse, beepr, tictoc, here)
#PREREQUISITE: Set up your username/password in Keyring
# Instructions: replace indicated areas in code below with your username/password for TACC server
# Run it once, and delete from code - code will not need to be run more than once per user per computer
# Keyring will save your username/password to your OS credential store, and the service/user/password combo
# can be retrieved without hardcoding a password or requring user input.
# key_set_with_value(service = "Greenplum",
#                   username = "-----------", #replace with your username
#                   password = "-----------") #replace with your password
#Connect to Greenplum
tac <- dbConnect(odbc::odbc(),
dsn = "PostgreSQL30",
database = "uthealth",
UID = "xrzhang",
PWD = key_get("Greenplum", "xrzhang"),
host = "greenplum01.corral.tacc.utexas.edu",
port = 5432)
#PREREQUISITE: Set up connection to SPCDEDPWPVS1 in ODBC Data sources
#Make sure the default schema is correct! This one is set to medicaid
#Connect to SPCDEDPWPVS1
spc <- dbConnect(odbc::odbc(),
dsn = "medicaid")
# clears R environment except for DB connections
rm(list=setdiff(ls(), c("tac", "spc")))
knitr::opts_chunk$set(echo=TRUE, rows.print=25)
#Define the starting and ending years for checking (4-digit year)
starting_year = 2012
ending_year = 2021
#Define how many rows to check per year
rows_to_check = '500000'
#Define how many sets of errors to print out per year
records_to_print = 5
#convert to 2-digit year
starting_yr = starting_year - 2000
ending_yr = ending_year - 2000
tac_sql = 'with b as (select race_cd_src, race_cd from reference_tables.ref_race
where data_source = \'mdcd\' and race_cd_src is not null)
select a.data_source, a.member_id_src, a.year, a.total_enrolled_months, a.gender_cd,
b.race_cd_src, a.age_derived, a.dob_derived, a.zip5, a.plan_type, a.dual, a.htw
from dw_staging.member_enrollment_yearly a left join b
on a.race_cd = b.race_cd
order by random()
limit @rows_to_check;'
tac_sql.mod = tac_sql %>% gsub('@rows_to_check', rows_to_check, .)
tac_selection = dbGetQuery(tac, tac_sql.mod)
dbGetQuery(spc, 'drop table if exists work.dbo.xz_dwqa_temp1;')
dbWriteTable(spc, SQL('work.dbo.xz_dwqa_temp1'), tac_selection)
#SEX, RACE, ZIP, AND PLAN HAVE MISMATCHES
#Pull lists of mismatches
sex_mismatches = dbGetQuery(spc, 'select member_id, year
from work.dbo.xz_mcd_enrl_mismatches
where sex_mismatch = 1;')
race_mismatches = dbGetQuery(spc, 'select member_id, year
from work.dbo.xz_mcd_enrl_mismatches
where race_mismatch = 1;')
zip_mismatches = dbGetQuery(spc, 'select member_id, year
from work.dbo.xz_mcd_enrl_mismatches
where zip_mismatch = 1;')
plan_mismatches = dbGetQuery(spc, 'select member_id, year
from work.dbo.xz_mcd_enrl_mismatches
where plan_mismatch = 1;')
#Define base queries
mismatch_query = 'select member_id, year,tacc_sex, spc_sex, tacc_race, spc_race,
tacc_zip, spc_zip, tacc_plan, spc_plan
from work.dbo.xz_mcd_enrl_mismatches where member_id = \'@memid\' and year = \'@year\''
tac_sql1 = 'with b as (select race_cd_src, race_cd from reference_tables.ref_race
where data_source = \'mdcd\' and race_cd_src is not null)
select a.member_id_src, a.year, a.month_year_id, a.gender_cd, b.race_cd_src,
a.zip5, a.plan_type
from dw_staging.member_enrollment_monthly a left join b
on a.race_cd = b.race_cd
where member_id_src = \'@memid\' and year = \'@year\'
order by a.month_year_id;'
spc_sql1 = 'select client_nbr, cy, elig_date, sex, race, zip, mco from work.dbo.xz_mcd_reconciliation_cy_etl
where client_nbr = \'@memid\' and cy = \'@year\'
order by elig_date;'
get_mismatch_info = function(current_mismatch){
tac_sql1.mod = tac_sql1 %>% gsub('@memid', current_mismatch[1,1], .) %>%
gsub('@year', current_mismatch[1,2], .)
spc_sql1.mod = spc_sql1 %>% gsub('@memid', current_mismatch[1,1], .) %>%
gsub('@year', current_mismatch[1,2], .)
mismatch_query.mod = mismatch_query %>% gsub('@memid', current_mismatch[1,1], .) %>%
gsub('@year', current_mismatch[1,2], .)
mismatch_details = dbGetQuery(spc, mismatch_query.mod)
tacc_details = dbGetQuery(tac, tac_sql1.mod)
spc_details = dbGetQuery(spc, spc_sql1.mod)
output = list(mismatch_details = mismatch_details,
tacc_details = tacc_details,
spc_details = spc_details)
return(output)
}
#this chunk spits out the final table
wb = createWorkbook()
dir = here("outputs")
path = here("outputs", "dw-enrollment-spotcheck-tacc-to-spc.xlsx")
addWorksheet(wb, sheetName = "Summary of Mismatches") #1
addWorksheet(wb, sheetName = "sex mismatches")        #2
addWorksheet(wb, sheetName = "race mismatches")       #3
addWorksheet(wb, sheetName = "zip mismatches")        #4
addWorksheet(wb, sheetName = "plan mismatches")       #5
#write data into sheet 1
writeData(wb, sheet = 1, "Data Warehouse Enrollment Tables Spot Check", startCol=1, startRow=1)
writeData(wb, sheet = 1, paste("Run date:", Sys.time()), startCol=1, startRow=2)
writeData(wb, sheet = 1, "Direction: Records selected from TACC server, checked against SPC server",
startCol=1, startRow=3)
writeData(wb, sheet = 1, paste("Rows checked:", rows_to_check), startCol = 1, startRow = 4)
writeData(wb, sheet = 1, sum_errors, startCol=1, startRow=6)
#write headers for all other sheets
writeData(wb, sheet = 2, "Sex Mismatches", startCol=1, startRow=1)
writeData(wb, sheet = 3, "Race Mismatches", startCol=1, startRow=1)
writeData(wb, sheet = 4, "Zip Mismatches", startCol=1, startRow=1)
writeData(wb, sheet = 5, "Plan Type Mismatches", startCol=1, startRow=1)
print("Writing mismatches for sex")
#Write mismatches for sex
next_row = 3 #reset next_row
for (i in 1:min(nrow(sex_mismatches), records_to_print)){
current_mismatch = sex_mismatches[i,]
output = get_mismatch_info(current_mismatch)
writeData(wb, sheet = 2, "Mismatch details from yearly tables", startCol = 1, startRow = next_row)
writeData(wb, sheet = 2, output$mismatch_details, startCol = 1, startRow = next_row + 1)
next_row = next_row + nrow(output$mismatch_details) + 3
writeData(wb, sheet = 2, "Mismatch details from TACC dw_staging monthly table",
startCol = 1, startRow = next_row)
writeData(wb, sheet = 2, output$tacc_details, startCol = 1, startRow = next_row+1)
next_row = next_row + nrow(output$tacc_details) + 3
writeData(wb, sheet = 2, "Mismatch details from SPC monthly tables", startCol = 1, startRow = next_row)
writeData(wb, sheet = 2, output$spc_details, startCol = 1, startRow = next_row+1)
next_row = next_row + nrow(output$spc_details) + 4
}
print("Writing mismatches for race")
#Write mismatches for race
next_row = 3 #reset next_row
for (i in 1:min(nrow(race_mismatches), records_to_print)){
current_mismatch = race_mismatches[i,]
output = get_mismatch_info(current_mismatch)
writeData(wb, sheet = 3, "Mismatch details from yearly tables", startCol = 1, startRow = next_row)
writeData(wb, sheet = 3, output$mismatch_details, startCol = 1, startRow = next_row + 1)
next_row = next_row + nrow(output$mismatch_details) + 3
writeData(wb, sheet = 3, "Mismatch details from TACC dw_staging monthly table",
startCol = 1, startRow = next_row)
writeData(wb, sheet = 3, output$tacc_details, startCol = 1, startRow = next_row+1)
next_row = next_row + nrow(output$tacc_details) + 3
writeData(wb, sheet = 3, "Mismatch details from SPC monthly tables", startCol = 1, startRow = next_row)
writeData(wb, sheet = 3, output$spc_details, startCol = 1, startRow = next_row+1)
next_row = next_row + nrow(output$spc_details) + 4
}
print("Writing mismatches for zip")
#Write mismatches for zip
next_row = 3 #reset next_row
for (i in 1:min(nrow(zip_mismatches), records_to_print)){
current_mismatch = zip_mismatches[i,]
output = get_mismatch_info(current_mismatch)
writeData(wb, sheet = 4, "Mismatch details from yearly tables", startCol = 1, startRow = next_row)
writeData(wb, sheet = 4, output$mismatch_details, startCol = 1, startRow = next_row + 1)
next_row = next_row + nrow(output$mismatch_details) + 3
writeData(wb, sheet = 4, "Mismatch details from TACC dw_staging monthly table",
startCol = 1, startRow = next_row)
writeData(wb, sheet = 4, output$tacc_details, startCol = 1, startRow = next_row+1)
next_row = next_row + nrow(output$tacc_details) + 3
writeData(wb, sheet = 4, "Mismatch details from SPC monthly tables", startCol = 1, startRow = next_row)
writeData(wb, sheet = 4, output$spc_details, startCol = 1, startRow = next_row+1)
next_row = next_row + nrow(output$spc_details) + 4
}
print("Writing mismatches for plan type")
#Write mismatches for plan type
next_row = 3 #reset next_row
for (i in 1:min(nrow(plan_mismatches), records_to_print)){
current_mismatch = plan_mismatches[i,]
output = get_mismatch_info(current_mismatch)
writeData(wb, sheet = 5, "Mismatch details from yearly tables", startCol = 1, startRow = next_row)
writeData(wb, sheet = 5, output$mismatch_details, startCol = 1, startRow = next_row + 1)
next_row = next_row + nrow(output$mismatch_details) + 3
writeData(wb, sheet = 5, "Mismatch details from TACC dw_staging monthly table",
startCol = 1, startRow = next_row)
writeData(wb, sheet = 5, output$tacc_details, startCol = 1, startRow = next_row+1)
next_row = next_row + nrow(output$tacc_details) + 3
writeData(wb, sheet = 5, "Mismatch details from SPC monthly tables", startCol = 1, startRow = next_row)
writeData(wb, sheet = 5, output$spc_details, startCol = 1, startRow = next_row+1)
next_row = next_row + nrow(output$spc_details) + 4
}
setColWidths(wb, sheet = 1, cols=1:10, widths="auto")
dir.create(file.path(dir), showWarnings = FALSE) #create directory if it does not exist
saveWorkbook(wb, file=path, overwrite=TRUE)
#PREREQUISITE: Set up your username/password in Keyring
# Instructions: replace indicated areas in code below with your username/password for TACC server
# Run it once, and delete from code - code will not need to be run more than once per user per computer
# Keyring will save your username/password to your OS credential store, and the service/user/password combo
# can be retrieved without hardcoding a password or requring user input.
# key_set_with_value(service = "Greenplum",
#                   username = "-----------", #replace with your username
#                   password = "-----------") #replace with your password
#Connect to Greenplum
tac <- dbConnect(odbc::odbc(),
dsn = "PostgreSQL30",
database = "uthealth",
UID = "xrzhang",
PWD = key_get("Greenplum", "xrzhang"),
host = "greenplum01.corral.tacc.utexas.edu",
port = 5432)
# Package installs/loading
if (!require("pacman")) install.packages("pacman")
pacman::p_load(RPostgres, DBI, odbc, keyring, openxlsx, tidyverse, beepr, tictoc, here)
#packages I don't use anymore: rstudioapi
#PREREQUISITE: Set up your username/password in Keyring
# Instructions: replace indicated areas in code below with your username/password for TACC server
# Run it once, and delete from code - code will not need to be run more than once per user per computer
# Keyring will save your username/password to your OS credential store, and the service/user/password combo
# can be retrieved without hardcoding a password or requring user input.
# key_set_with_value(service = "Greenplum",
#                   username = "-----------", #replace with your username
#                   password = "-----------") #replace with your password
#Connect to Greenplum
tac <- dbConnect(RPostgres::Postgres(),
dbname = "uthealth",
user = "xrzhang",
password = key_get("Greenplum", "xrzhang"),
host = "greenplum01.corral.tacc.utexas.edu",
port = 5432)
#PREREQUISITE: Set up connection to SPCDEDPWPVS1 in ODBC Data sources
#Make sure the default schema is correct! This one is set to medicaid
#Connect to SPCDEDPWPVS1
spc <- dbConnect(odbc::odbc(),
dsn = "medicaid")
# clears R environment except for DB connections
rm(list=setdiff(ls(), c("tac", "spc")))
knitr::opts_chunk$set(echo=TRUE, rows.print=25)
options("scipen"=100, "digits" = 4) #avoid scientific notation
#SPC server shouldn't have major changes year to year, so if output exists already
#use that
path = here("outputs", "spc-claims-counting.xlsx")
if (file.exists(path)) {
spc_counts = read.xlsx(path, sheet=1, startRow = 4)
} else {
stop("Output is missing! Go back and run the previous code file!")
}
#define starting and ending year
starting_year = 2012
ending_year = 2021
#conver to 2-digit year
starting_yr = starting_year - 2000
ending_yr = ending_year - 2000
dwstage_det_comb = rbind(dwstage_det, dwstage_det_total)
dwstage_head_comb = rbind(dwstage_head, dwstage_head_total)
#join in yearly counts
claim_counts_TACCmcd = full_join(TACCmcd_clm_head, TACCmcd_clm_det, by = 'year_fy') %>%
rename(CLM_HEAD = count.x, CLM_DET = count.y) %>%
full_join(., TACCmcd_enc_head, by = 'year_fy') %>%
rename(ENC_HEAD = count) %>%
full_join(., TACCmcd_enc_det, by = 'year_fy') %>%
rename(ENC_DET = count)
#fix ENC_HEAD and ENC_DET for 2012
claim_counts_TACCmcd[1, 4] = claim_counts_TACCmcd[1, 5] = 0
#prep HTW for joining in
claim_counts_TACCmcd_htw = full_join(TACCmcd_htw_head, TACCmcd_htw_det, by = 'year_fy') %>%
rename(CLM_HEAD = count.x, CLM_DET = count.y) %>%
add_column(ENC_HEAD = 0, ENC_DET = 0)
#prep totals count for joining in
claim_counts_TACCmcd_total = full_join(TACCmcd_total_head, TACCmcd_total_det, by = 'year_fy') %>%
rename(TACmcd_HEAD = count.x, TACmcd_DET = count.y) %>%
add_column(CLM_HEAD = 0, CLM_DET = 0, ENC_HEAD = 0, ENC_DET = 0) %>%
select(year_fy, CLM_HEAD, CLM_DET, ENC_HEAD, ENC_DET, TACmcd_HEAD, TACmcd_DET)
#join in HTW, TOTALs counts and calculate totals
claim_counts_TACCmcd = claim_counts_TACCmcd %>%
rbind(., claim_counts_TACCmcd_htw) %>%
mutate(TACmcd_HEAD = CLM_HEAD + ENC_HEAD,
TACmcd_DET = CLM_DET + ENC_DET) %>%
rbind(., claim_counts_TACCmcd_total)
#prep dw_staging for joining
dwstage_head_prep = dwstage_head
dwstage_det_prep = dwstage_det
dwstage_head_prep[11,1] = 'Total'
dwstage_det_prep[11,1] = 'Total'
colnames(dwstage_head_prep)=c('year_fy', 'DW_HEAD')
colnames(dwstage_det_prep)=c('year_fy', 'DW_DET')
#join in dw_staging counts
claim_counts_TACC = claim_counts_TACCmcd %>%
full_join(., dwstage_head_prep, by = 'year_fy') %>%
full_join(., dwstage_det_prep, by = 'year_fy')
#prep spc_counts for merge
spc_counts_merge = spc_counts %>%
mutate(SPC_HEAD = CLM_HEAD + ENC_HEAD,
SPC_DET = CLM_DET + ENC_DET) %>%
rename(year_fy = Year) %>%
select(year_fy, SPC_HEAD, SPC_DET)
#join in dw_staging counts
claim_counts_TACC = claim_counts_TACC %>%
full_join(., spc_counts_merge, by = 'year_fy')
#replace na with 0
claim_counts_TACC[is.na(claim_counts_TACC)] = 0
#see if there are differenes
count_diffs = claim_counts_TACC %>%
mutate(DW_V_TACm_HEAD = TACmcd_HEAD - DW_HEAD,
DW_V_TACm_DET = TACmcd_DET - DW_DET) %>%
add_column(spacer1 = NA, spacer2 = NA) %>%
mutate(DW_V_SPC_HEAD = SPC_HEAD - DW_HEAD,
DW_V_SPC_DET = SPC_DET - DW_DET) %>%
select(year_fy, 12:17)
#subset for output
claim_counts_TACC_out = claim_counts_TACC %>%
select(year_fy, 6:11)
#make table legends so we know what the columns are
column_name = colnames(claim_counts_TACC_out)
description <- c( "Fiscal Year",
"Count of distinct claims in TACC medicaid schema - headers",
"Count of distinct claims in TACC medicaid schema - details",
"Count of distinct claims in dw_staging.claim_header",
"Count of distinct claims in dw_staging.claim_detail",
"Count of distinct claims in SPC medicaid schema headers joined to procs",
"Count of distinct claims in SPC medicaid schema details joined to procs")
table_legend <- data.frame(column_name, description)
colnames(table_legend) = c("Column Name", "Description")
wb = createWorkbook()
dir = here("outputs")
path = here("outputs", "dw-staging-claims-counting.xlsx")
addWorksheet(wb, sheetName = "Count of distinct claims")
writeData(wb, sheet = 1, "Count of distinct claims across SPC and TACC servers (DW Staging)", startCol=1, startRow=1)
writeData(wb, sheet = 1, paste("Run time:", Sys.time()), startCol=1, startRow=2)
writeData(wb, sheet = 1, claim_counts_TACC_out, startCol=1, startRow=4)
nextrow = nrow(claim_counts_TACC_out) + 6
writeData(wb, sheet = 1, "Difference between counts (Raw data count - DW count)", startCol=1, startRow=nextrow)
writeData(wb, sheet = 1, count_diffs, startCol=1, startRow=nextrow + 1)
#overwrite the spacer columns
writeData(wb, sheet = 1, '', startCol=4, startRow=nextrow + 1)
writeData(wb, sheet = 1, '', startCol=5, startRow=nextrow + 1)
#write the legend
nextrow = nextrow + nrow(count_diffs) + 3
writeData(wb, sheet = 1, table_legend, startCol=1, startRow=nextrow)
#write notes
nextrow = nextrow + nrow(table_legend) + 3
writeData(wb, sheet = 1, "Notes:", startCol=1, startRow=nextrow)
nextrow = nextrow + 1
writeData(wb, sheet = 1, "The 124 claims difference in 2016 is due to joining proc, details, and headers - the missing claims do not exist in the header table", startCol=1, startRow=nextrow)
nextrow = nextrow + 1
writeData(wb, sheet = 1, "The discrepancy in 2018 is largely due to HTW claims", startCol=1, startRow=nextrow)
nextrow = nextrow + 1
writeData(wb, sheet = 1, "HTW discrepancy: see 2018", startCol=1, startRow=nextrow)
#set colwidths
setColWidths(wb, sheet = 1, cols=1:ncol(claim_counts_TACC_out)+1, widths="auto")
setColWidths(wb, sheet = 1, cols=1:2, widths=c(15, 15))
#save to file
dir.create(file.path(dir), showWarnings = FALSE) #create directory if it does not exist
saveWorkbook(wb, file=path, overwrite=TRUE)
