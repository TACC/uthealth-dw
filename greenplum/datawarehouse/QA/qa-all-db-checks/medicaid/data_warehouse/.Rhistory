a.dtl_alwd_amt as spc_allowed_amount,
a.dtl_pd_amt as spc_paid_amount,
a.ref_prov_npi as spc_ref_provider,
a.perf_prov_npi as spc_perf_rn_provider,
\'          \' as spc_perf_op_provider,
a.txm_cd as spc_provider_type,
b.adm_dt as spc_admit_date,
b.dis_dt as spc_discharge_date,
b.pat_stat_cd as spc_discharge_status,
b.icn as spc_claim_id_src,
c.drg as spc_drg_cd,
substring(c.bill, 1, 1) as spc_bill_type_inst,
substring(c.bill, 2, 1) as spc_bill_type_class,
substring(c.bill, 3, 1) as spc_bill_type_freq,
\'          \' as spc_units,
c.pcn as spc_member_id_src
into work.dbo.xz_dwqa_temp1
from medicaid.dbo.clm_detail_1819_htw a tablesample(@rows_to_sample rows) inner join
medicaid.dbo.clm_header_1819_htw b on a.icn = b.icn inner join
medicaid.dbo.clm_proc_1819_htw c on a.icn = c.icn;'
spc_sql4 = 'alter table work.dbo.xz_dwqa_temp1
alter column spc_perf_op_provider varchar(50);
alter table work.dbo.xz_dwqa_temp1
alter column spc_units varchar(50);'
#clear the holding table on TACC side
dbGetQuery(tac, 'drop table if exists dev.xz_dwqa_temp1;')
print("tacc temp table dropped")
#yr = 14
for (yr in starting_yr:ending_yr){
#clear tables
dbGetQuery(spc, 'drop table if exists work.dbo.xz_dwqa_temp1;')
print("spc temp table dropped")
if (yr == 12){
print("Sampling records for 2012, the special year")
#for 2012,
#modify just the claims queries
spc_sql1.mod = spc_sql1 %>% gsub('@rows_to_check', rows_to_check, .) %>%
gsub('@rows_to_sample', rows_to_sample, .) %>%
gsub('@yr', yr, .)
#and send query
tic("sample from claims")
dbGetQuery(spc, spc_sql1.mod)
toc()
} else {
print(paste0("Sampling records for 20", yr))
#for all other years
#modify queries
spc_sql1.mod = spc_sql1 %>% gsub('@rows_to_check', rows_to_check, .) %>%
gsub('@rows_to_sample', rows_to_sample, .) %>%
gsub('@yr', yr, .)
spc_sql2.mod = spc_sql2 %>% gsub('@rows_to_check', rows_to_check, .) %>%
gsub('@rows_to_sample', rows_to_sample, .) %>%
gsub('@yr', yr, .)
tic("sample from claims")
dbGetQuery(spc, spc_sql1.mod)
toc()
#dbExecute(spc, spc_sql4) #make NULL int columns into varchar
#print("datatype changed")
tic("sample from encounters")
dbGetQuery(spc, spc_sql2.mod)
toc()
}
spc_selection = dbGetQuery(spc, 'select * from work.dbo.xz_dwqa_temp1;')
#make all names lowercase bc GP gets case-sensitive
names(spc_selection) = tolower(names(spc_selection))
tic("Write to TACC")
dbWriteTable(tac, SQL('dev.xz_dwqa_temp1'), spc_selection, append = T, overwrite = F)
toc()
}
#Sample HTW claims
#clear tables
dbGetQuery(spc, 'drop table if exists work.dbo.xz_dwqa_temp1;')
spc_sql3.mod = spc_sql3 %>% gsub('@rows_to_check', rows_to_check, .) %>%
gsub('@rows_to_sample', rows_to_sample, .)
tic("sample from HTW")
dbGetQuery(spc, spc_sql3.mod)
toc()
spc_selection = dbGetQuery(spc, 'select * from work.dbo.xz_dwqa_temp1;')
#make all names lowercase bc GP gets case-sensitive
names(spc_selection) = tolower(names(spc_selection))
tic("Write to TACC")
dbWriteTable(tac, SQL('dev.xz_dwqa_temp1'), spc_selection, append = T, overwrite = F)
toc()
output = sum_mismatches
wb = createWorkbook()
dir = here("outputs")
path = here("outputs", "dw-claim-details-spotcheck.xlsx")
addWorksheet(wb, sheetName = "claim_details spotcheck")
writeData(wb, sheet = 1, "Mismatches found in claim_details tables between SPC and data_warehouse", startCol=1, startRow=1)
writeData(wb, sheet = 1, paste("Run time:", Sys.time()), startCol=1, startRow=2)
writeData(wb, sheet = 1, paste("Rows sampled per SPC table:", rows_to_check), startCol=1, startRow=3)
writeData(wb, sheet = 1, output, startCol=1, startRow=5)
nextrow = nrow(output) + 7
writeData(wb, sheet = 1, "Note: from_dos and to_dos mismatches are corrections of raw data (raw data = 01-01-0001)", startCol=1, startRow=nextrow)
writeData(wb, sheet = 1, "Note: Unit mismatches are due to enc tables allowing partial units (floats), and data_warehouse coercing numbers to int upon import", startCol=1, startRow=nextrow+1)
setColWidths(wb, sheet = 1, cols=1:ncol(output)+1, widths="auto")
setColWidths(wb, sheet = 1, cols=1, widths=10)
dir.create(file.path(dir), showWarnings = FALSE) #create directory if it does not exist
saveWorkbook(wb, file=path, overwrite=TRUE)
View(sum_mismatches)
# Package installs/loading
if (!require("pacman")) install.packages("pacman")
pacman::p_load(RPostgres, DBI, odbc, keyring, openxlsx, tidyverse, beepr, tictoc, here)
#packages I don't use anymore: rstudioapi
#PREREQUISITE: Set up your username/password in Keyring
# Instructions: replace indicated areas in code below with your username/password for TACC server
# Run it once, and delete from code - code will not need to be run more than once per user per computer
# Keyring will save your username/password to your OS credential store, and the service/user/password combo
# can be retrieved without hardcoding a password or requring user input.
# key_set_with_value(service = "Greenplum",
#                   username = "-----------", #replace with your username
#                   password = "-----------") #replace with your password
#Connect to Greenplum
tac <- dbConnect(RPostgres::Postgres(),
dbname = "uthealth",
user = "xrzhang",
password = key_get("Greenplum", "xrzhang"),
host = "greenplum01.corral.tacc.utexas.edu",
port = 5432)
#PREREQUISITE: Set up connection to SPCDEDPWPVS1 in ODBC Data sources
#Make sure the default schema is correct! This one is set to medicaid
#Connect to SPCDEDPWPVS1
spc <- dbConnect(odbc::odbc(),
dsn = "medicaid")
# clears R environment except for DB connections
rm(list=setdiff(ls(), c("tac", "spc")))
knitr::opts_chunk$set(echo=TRUE, rows.print=25)
options("scipen"=100, "digits" = 4) #avoid scientific notation
#SPC server shouldn't have major changes year to year, so if output exists already
#use that
path = here("outputs", "spc-rx-counting.xlsx")
if (file.exists(path)) {
spc_counts = read.xlsx(path, sheet=1, startRow = 4)
} else {
stop("Output is missing! Go back and run the previous code file!")
}
#define starting and ending year
starting_year = 2012
ending_year = 2021
#conver to 2-digit year
starting_yr = starting_year - 2000
ending_yr = ending_year - 2000
dw_chip = dw_counts %>%
filter(table_id_src == 'chip_rx') %>%
select(fiscal_year, src_id) %>%
rename(fy = fiscal_year, dw_chip=src_id)
dw_ffs = dw_counts %>%
filter(table_id_src == 'ffs_rx') %>%
select(fiscal_year, src_id) %>%
rename(fy = fiscal_year, dw_ffs=src_id)
dw_mco = dw_counts %>%
filter(table_id_src == 'mco_rx') %>%
select(fiscal_year, src_id) %>%
rename(fy = fiscal_year, dw_mco=src_id)
dw_htw_only = dw_counts %>%
filter(table_id_src == 'htw_ffs_rx')
dw_htw = sum(dw_htw_only$src_id)
all_counts = spc_counts %>%
rename(spc_chip = chip, spc_ffs = ffs, spc_mco = mco, spc_sum = sum) %>%
left_join(dw_chip, by = "fy") %>%
left_join(dw_ffs, by = "fy") %>%
left_join(dw_mco, by = "fy") %>%
mutate(dw_sum = dw_chip + dw_ffs + dw_mco) %>%
arrange(fy)
#insert HTW number
all_counts[which(all_counts$fy=='HTW'), 9] = dw_htw
all_counts = all_counts %>%
mutate(chip_diff = spc_chip - dw_chip) %>%
mutate(ffs_diff = spc_ffs - dw_ffs) %>%
mutate(mco_diff = spc_mco - dw_mco) %>%
mutate(sum_diff = spc_sum - dw_sum) %>%
arrange(fy)
percent_diff = all_counts %>%
mutate(chip_bad_records = chip_diff/dw_chip) %>%
mutate(ffs_bad_records = ffs_diff/dw_ffs) %>%
mutate(mco_bad_records = mco_diff/dw_mco) %>%
mutate(sum_bad_records = sum_diff/dw_sum) %>%
select(fy, chip_bad_records, ffs_bad_records, mco_bad_records, sum_bad_records)
output = all_counts
output2 = percent_diff
wb = createWorkbook()
dir = here("outputs")
path = here("outputs", "dw-rx-counting.xlsx")
addWorksheet(wb, sheetName = "rx_id spotcheck")
writeData(wb, sheet = 1, "Count of distinct PCN || NDC || FILL_DT combinations between SPC server and data_warehouse", startCol=1, startRow=1)
writeData(wb, sheet = 1, paste("Run time:", Sys.time()), startCol=1, startRow=2)
writeData(wb, sheet = 1, output, startCol=1, startRow=4)
nextrow = nrow(output) + 7
writeData(wb, sheet = 1, "Note: The missing RX claims are due to PCNs that do not exist in the enrollment tables", startCol=1, startRow=nextrow)
writeData(wb, sheet = 1, "The proportion of claims with PCNs that do not match is:", startCol=1, startRow=nextrow+1)
writeData(wb, sheet = 1, output2, startCol=1, startRow=nextrow+3)
setColWidths(wb, sheet = 1, cols=1:ncol(output)+1, widths="auto")
setColWidths(wb, sheet = 1, cols=1, widths=10)
dir.create(file.path(dir), showWarnings = FALSE) #create directory if it does not exist
saveWorkbook(wb, file=path, overwrite=TRUE)
# Package installs/loading
if (!require("pacman")) install.packages("pacman")
pacman::p_load(RPostgres, DBI, odbc, keyring, openxlsx, tidyverse, beepr, tictoc, here)
#packages I don't use anymore: rstudioapi
#PREREQUISITE: Set up your username/password in Keyring
# Instructions: replace indicated areas in code below with your username/password for TACC server
# Run it once, and delete from code - code will not need to be run more than once per user per computer
# Keyring will save your username/password to your OS credential store, and the service/user/password combo
# can be retrieved without hardcoding a password or requring user input.
# key_set_with_value(service = "Greenplum",
#                   username = "-----------", #replace with your username
#                   password = "-----------") #replace with your password
#Connect to Greenplum
tac <- dbConnect(RPostgres::Postgres(),
dbname = "uthealth",
user = "xrzhang",
password = key_get("Greenplum", "xrzhang"),
host = "greenplum01.corral.tacc.utexas.edu",
port = 5432)
#PREREQUISITE: Set up connection to SPCDEDPWPVS1 in ODBC Data sources
#Make sure the default schema is correct! This one is set to medicaid
#Connect to SPCDEDPWPVS1
spc <- dbConnect(odbc::odbc(),
dsn = "medicaid")
# clears R environment except for DB connections
rm(list=setdiff(ls(), c("tac", "spc")))
knitr::opts_chunk$set(echo=TRUE, rows.print=25)
options("scipen"=100, "digits" = 6) #avoid scientific notation
#define the years that we're trying to get data for (2-digit year, por favor)
start_yr = 16
end_yr = 21
num_years = end_yr - start_yr + 1
#define where the template spreadsheet is
template_path = here("resources", "rows.csv")
out_path = here("5Agencies-Wellness-TDCJ.xlsx")
#Define the age group legend
agegrp_legend = data.frame(
agegrp = 0:7,
definition = c("All",
"0-19",
"20-34",
"35-44",
"45-54",
"55-64",
"65 -74",
"75+")
)
#define the version information
versions = data.frame(Version = character(),    # Create empty data frame
Date = character(),
Notes = numeric(),
stringsAsFactors = FALSE)
versions[1,] = list("v1", "11/9/2020", "")
versions[2,] = list("v2", "11/16/2020", "")
versions[3,] = list("v3", "3/4/2021", "")
versions[4,] = list("v4", "4/28/2021", "Add obesity")
versions[5,] = list("v5", "9/13/2021", "Add tobacco use, add 2020 measures")
versions[6,] = list("v6", "4/4/2022", "modify to include table Wellness_fy1621")
versions[7,] = list("v7", "8/17/2022", "Add 2021 measures")
versions[8,] = list("v8", "11/8/2022", "XZ rewrote code - see additional notes")
additional_notes = c("Additional notes for v8:",
"1) Used Chau's enrollment table (CDEXTRA$/CHAU/FiveAgency/tdcj/data/tdcj_enrl.sas7bdat)",
"2) Removed the 12 months continuous enrollment criteria",
"3) Adult Depression - included exclusion criteria",
"4) Annual Exam - used Wellness_fy201621 as inclusion criteria",
"5) Tobacco/Tobacco cessation - included searching for drug names for inclusion criteria",
"6) Various other small fixes - there was an incorrect FY in one place, changed exact dx code matching to like dx%, etc.",
"7) Added ")
prep_df = function (df){
#Prep vectors of column names for renaming
colnames.old = colnames(df)
colnames.new = c('region', 'FY', 'sex', 'agegrp', 'denominator', 'numerator')
#Rename columns
df = df %>%
rename_at(vars(all_of(colnames.old)), ~colnames.new)
#Calculate prevalence, trim white space from MCO column
df = df %>% mutate(prevalence = numerator/denominator)
return(df)
}
append_by_year = function(df, joint_df, yr){
#subset by year
df = df %>%
filter(FY == (2000 + yr))
#Join to row number
df = rows %>%
left_join(df, by = c('region', 'sex', 'agegrp'), keep=FALSE) %>%
arrange(row_num) %>%
select(row_num, region, sex, agegrp, denominator, numerator, prevalence)
#Prep column names for renaming
colnames.old = colnames(df)
colnames.new = c('row_num', 'region', 'sex', 'agegrp',
paste0('denominator', yr),
paste0('numerator', yr),
paste0('prevalence', yr))
#Renames columns with year
df = df %>%
rename_at(vars(all_of(colnames.old)), ~colnames.new)
#Joins it to the final table
joint_df = joint_df %>%
left_join(df, by = c('row_num', 'region', 'sex', 'agegrp'), keep=FALSE)
return(joint_df)
}
#define styles
blank = createStyle(fgFill = NULL, border = NULL)
black = createStyle(fgFill = "#000000", border="TopBottomLeftRight", borderColour = "#000000", borderStyle="thin")
color1 = createStyle(fgFill = "lavenderblush", border="TopBottomLeftRight",  borderColour = "#000000", borderStyle="thin")
color2 = createStyle(fgFill = "lightgoldenrodyellow", border="TopBottomLeftRight",  borderColour = "#000000", borderStyle="thin")
color3 = createStyle(fgFill = "#E7FFE7", border="TopBottomLeftRight",  borderColour = "#000000", borderStyle="thin")
color4 = createStyle(fgFill = "lavender", border="TopBottomLeftRight",  borderColour = "#000000", borderStyle="thin")
boldcenter = createStyle(halign = "center", textDecoration = c("BOLD"))
bold = createStyle(textDecoration = c("BOLD"))
males = createStyle(fgFill = "dodgerblue2", border=NULL, textDecoration = c("BOLD"), fontColour="white")
females = createStyle(fgFill = "deeppink", border=NULL, textDecoration = c("BOLD"), fontColour="white")
#males and females style definitions not used
# define how many years we're writing data for
num_years = end_yr-start_yr+1
colsend = (num_years+1)*3
#make mini-df of header names
tinycolnames = data.frame(matrix(c("Denominator", "Numerator", "Prevalence"), nrow=1))
#define which rows are black bars
black_rows = c(7,15,23)
adult_depression_raw = dbReadTable(spc, SQL("work.dbo.xz_5a_tdcj_depression_finaltab"))
annual_exam_raw = dbReadTable(spc, SQL("work.dbo.xz_5a_tdcj_annual_finaltab"))
flu_raw = dbReadTable(spc, SQL("work.dbo.xz_5a_tdcj_flu_finaltab"))
smoking_raw = dbReadTable(spc, SQL("work.dbo.xz_5a_tdcj_smoking_finaltab"))
smoking_cessation_raw = dbReadTable(spc, SQL("work.dbo.xz_5a_tdcj_smoking_finaltab2"))
obesity_raw = dbReadTable(spc, SQL("work.dbo.xz_5a_tdcj_obesity_finaltab"))
obesity_counseling_raw = dbReadTable(spc, SQL("work.dbo.xz_5a_tdcj_obesity_finaltab2"))
#Import rows so we can match Will's spreadsheets
rows = read.csv(template_path, header = TRUE)
# Package installs/loading
if (!require("pacman")) install.packages("pacman")
pacman::p_load(RPostgres, DBI, odbc, keyring, openxlsx, tidyverse, beepr, tictoc, here)
#PREREQUISITE: Set up your username/password in Keyring
# Instructions: replace indicated areas in code below with your username/password for TACC server
# Run it once, and delete from code - code will not need to be run more than once per user per computer
# Keyring will save your username/password to your OS credential store, and the service/user/password combo
# can be retrieved without hardcoding a password or requiring user input.
# key_set_with_value(service = "Greenplum",
#                   username = "-----------", #replace with your username
#                   password = "-----------") #replace with your password
#Connect to Greenplum
tac <- dbConnect(RPostgres::Postgres(),
dbname = "uthealth",
user = "xrzhang",
password = key_get("Greenplum", "xrzhang"),
host = "greenplum01.corral.tacc.utexas.edu",
port = 5432)
#PREREQUISITE: Set up connection to SPCDEDPWPVS1 in ODBC Data sources
#Make sure the default schema is correct! This one is set to medicaid
#Connect to SPCDEDPWPVS1
spc <- dbConnect(odbc::odbc(),
dsn = "medicaid")
# clears R environment except for DB connections
rm(list=setdiff(ls(), c("tac", "spc")))
knitr::opts_chunk$set(echo=TRUE, rows.print=25)
options("scipen"=100, "digits" = 4) #avoid scientific notation
#Define the starting and ending years for checking (4-digit year)
starting_year = 2012
ending_year = 2021
#Define how many rows to check per table
rows_to_check = 5000
#set rows_to_sample as slightly higher than rows to check b/c of
#the funny way that tablesample works
rows_to_sample = as.integer(rows_to_check) * 1.2
#convert to 2-digit year
starting_yr = starting_year - 2000
ending_yr = ending_year - 2000
#select random rows from rx tables
spc_sql1 = 'select top @rows_to_check  \'20@yr\' as spc_fy,
\'chip\' as spc_table,
rx_fill_dt as spc_fill_date,
ndc as spc_ndc,
rx_days_supply as spc_days_supply,
rx_nbr as spc_script_id,
refill_nbr as spc_refill_count,
rx_quantity as spc_quantity,
prescriber_npi as spc_provider_npi,
phmcy_nbr as spc_pharmacy_id,
gross_amt_due  as spc_total_charge_amount,
amount_paid as spc_total_paid_amount,
pcn as spc_member_id_src,
concat(pcn, ndc, replace(rx_fill_dt, \'-\', \'\')) as rx_id
into work.dbo.xz_dwqa_temp1
from medicaid.dbo.chip_rx_fy@yr tablesample(@rows_to_sample rows);'
spc_sql2 = 'insert into work.dbo.xz_dwqa_temp1
select top @rows_to_check  \'20@yr\' as spc_fy,
\'ffs\' as spc_table,
rx_fill_dt as spc_fill_date,
ndc as spc_ndc,
rx_days_supply as spc_days_supply,
rx_nbr as spc_script_id,
refill_nbr as spc_refill_count,
rx_quantity as spc_quantity,
prescriber_npi as spc_provider_npi,
phmcy_nbr as spc_pharmacy_id,
gross_amt_due  as spc_total_charge_amount,
amount_paid as spc_total_paid_amount,
pcn as spc_member_id_src,
concat(pcn, ndc, replace(rx_fill_dt, \'-\', \'\')) as rx_id
from medicaid.dbo.ffs_rx_fy@yr tablesample(@rows_to_sample rows);'
spc_sql3 = 'insert into work.dbo.xz_dwqa_temp1
select top @rows_to_check  \'20@yr\' as spc_fy,
\'mco\' as spc_table,
rx_fill_dt as spc_fill_date,
ndc as spc_ndc,
rx_days_supply as spc_days_supply,
rx_nbr as spc_script_id,
refill_nbr as spc_refill_count,
rx_quantity as spc_quantity,
prescriber_npi as spc_provider_npi,
phmcy_nbr as spc_pharmacy_id,
gross_amt_due  as spc_total_charge_amount,
amount_paid as spc_total_paid_amount,
pcn as spc_member_id_src,
concat(pcn, ndc, replace(rx_fill_dt, \'-\', \'\')) as rx_id
from medicaid.dbo.mco_rx_fy@yr tablesample(@rows_to_sample rows);'
spc_sql4 = 'select top @rows_to_check  \'HTW\' as spc_fy,
\'htw\' as spc_table,
rx_fill_dt as spc_fill_date,
ndc as spc_ndc,
rx_days_supply as spc_days_supply,
rx_nbr as spc_script_id,
refill_nbr as spc_refill_count,
rx_quantity as spc_quantity,
prescriber_npi as spc_provider_npi,
phmcy_nbr as spc_pharmacy_id,
gross_amt_due  as spc_total_charge_amount,
amount_paid as spc_total_paid_amount,
pcn as spc_member_id_src,
concat(pcn, ndc, replace(rx_fill_dt, \'-\', \'\')) as rx_id
into work.dbo.xz_dwqa_temp1
from medicaid.dbo.FFS_RX_FY18_19_HTW tablesample(@rows_to_sample rows);'
#clear the holding table on TACC side
dbGetQuery(tac, 'drop table if exists dev.xz_dwqa_temp1;')
print("tacc temp table dropped")
#yr = 14
for (yr in starting_yr:ending_yr){
#clear tables
dbGetQuery(spc, 'drop table if exists work.dbo.xz_dwqa_temp1;')
print("spc temp table dropped")
print(paste0("Sampling records for 20", yr))
#modify queries
spc_sql1.mod = spc_sql1 %>% gsub('@rows_to_check', rows_to_check, .) %>%
gsub('@rows_to_sample', rows_to_sample, .) %>%
gsub('@yr', yr, .)
spc_sql2.mod = spc_sql2 %>% gsub('@rows_to_check', rows_to_check, .) %>%
gsub('@rows_to_sample', rows_to_sample, .) %>%
gsub('@yr', yr, .)
spc_sql3.mod = spc_sql3 %>% gsub('@rows_to_check', rows_to_check, .) %>%
gsub('@rows_to_sample', rows_to_sample, .) %>%
gsub('@yr', yr, .)
tic("sample from chip")
dbGetQuery(spc, spc_sql1.mod)
toc()
tic("sample from ffs")
dbGetQuery(spc, spc_sql2.mod)
toc()
tic("sample from mco")
dbGetQuery(spc, spc_sql3.mod)
toc()
spc_selection = dbGetQuery(spc, 'select * from work.dbo.xz_dwqa_temp1;')
#make all names lowercase bc GP gets case-sensitive
names(spc_selection) = tolower(names(spc_selection))
tic("Write to TACC")
dbWriteTable(tac, SQL('dev.xz_dwqa_temp1'), spc_selection, append = T, overwrite = F)
toc()
}
#Sample HTW claims
#clear tables
dbGetQuery(spc, 'drop table if exists work.dbo.xz_dwqa_temp1;')
spc_sql4.mod = spc_sql4 %>% gsub('@rows_to_check', rows_to_check, .) %>%
gsub('@rows_to_sample', rows_to_sample, .)
tic("sample from HTW")
dbGetQuery(spc, spc_sql4.mod)
toc()
spc_selection = dbGetQuery(spc, 'select * from work.dbo.xz_dwqa_temp1;')
#make all names lowercase bc GP gets case-sensitive
names(spc_selection) = tolower(names(spc_selection))
tic("Write to TACC")
dbWriteTable(tac, SQL('dev.xz_dwqa_temp1'), spc_selection, append = T, overwrite = F)
toc()
output = sum_mismatches
wb = createWorkbook()
dir = here("outputs")
path = here("outputs", "dw-rx-spotcheck.xlsx")
addWorksheet(wb, sheetName = "rx spotcheck")
writeData(wb, sheet = 1, "Mismatches found in pharmacy_claims tables between SPC and data_warehouse", startCol=1, startRow=1)
writeData(wb, sheet = 1, paste("Run time:", Sys.time()), startCol=1, startRow=2)
writeData(wb, sheet = 1, paste("Rows sampled per SPC table:", rows_to_check), startCol=1, startRow=3)
writeData(wb, sheet = 1, output, startCol=1, startRow=5)
nextrow = nrow(output) + 7
writeData(wb, sheet = 1, "Note: quantity_mismatch is b/c raw data quantities are floats and are coerced to ints upon loading into dw", startCol=1, startRow=nextrow)
writeData(wb, sheet = 1, "Note: I didn't exhaustively check other mismatches, but they seem to be related to '' being converted to NULLs in dw", startCol=1, startRow=nextrow+1)
writeData(wb, sheet = 1, "Note: I also had to match on rx_claim_id_src, total_charge_amount, total_paid_amount, ... etc. 8/11 variables to achieve anything close to unique row-matching.", startCol=1, startRow=nextrow+2)
setColWidths(wb, sheet = 1, cols=1:ncol(output)+1, widths="auto")
setColWidths(wb, sheet = 1, cols=1, widths=10)
dir.create(file.path(dir), showWarnings = FALSE) #create directory if it does not exist
saveWorkbook(wb, file=path, overwrite=TRUE)
View(sum_mismatches)
output = sum_mismatches
wb = createWorkbook()
dir = here("outputs")
path = here("outputs", "dw-rx-spotcheck.xlsx")
addWorksheet(wb, sheetName = "rx spotcheck")
writeData(wb, sheet = 1, "Mismatches found in pharmacy_claims tables between SPC and data_warehouse", startCol=1, startRow=1)
writeData(wb, sheet = 1, paste("Run time:", Sys.time()), startCol=1, startRow=2)
writeData(wb, sheet = 1, paste("Rows sampled per SPC table:", rows_to_check), startCol=1, startRow=3)
writeData(wb, sheet = 1, output, startCol=1, startRow=5)
nextrow = nrow(output) + 7
writeData(wb, sheet = 1, "Note: quantity_mismatch is b/c raw data quantities are floats and are coerced to ints upon loading into dw", startCol=1, startRow=nextrow)
writeData(wb, sheet = 1, "Note: I didn't exhaustively check other mismatches, but they seem to be related to '' being converted to NULLs in dw", startCol=1, startRow=nextrow+1)
writeData(wb, sheet = 1, "Note: I also had to match on rx_claim_id_src, total_charge_amount, total_paid_amount, ... etc. 8/11 variables to achieve anything close to unique row-matching.", startCol=1, startRow=nextrow+2)
setColWidths(wb, sheet = 1, cols=1:ncol(output)+1, widths="auto")
setColWidths(wb, sheet = 1, cols=1, widths=10)
dir.create(file.path(dir), showWarnings = FALSE) #create directory if it does not exist
saveWorkbook(wb, file=path, overwrite=TRUE)
