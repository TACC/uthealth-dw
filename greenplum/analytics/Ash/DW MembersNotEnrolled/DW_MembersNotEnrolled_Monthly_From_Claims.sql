--yearly level
drop table if exists dev.am_all_members_yearly;
select c.data_source , c.data_year , c.uth_member_id , c.member_id_src , date_part('month', c.from_date_of_service) as claim_month,
		date_part('year', c.from_date_of_service) as claim_year, e.uth_member_id as mem_not_enrolled
	into dev.am_all_members_yearly 
	from data_warehouse.claim_header c 
	left join data_warehouse.member_enrollment_yearly e on e.data_source = c.data_source and 
															e."year" = date_part('year', c.from_date_of_service) and 
															e.uth_member_id = c.uth_member_id; 
-----------------------------------------------------------------------------------------------------------------------------------------------------							
--isolate members not enrolled
drop table if exists dev.am_members_not_enrolled_monthly;															
	select distinct c.data_source , c.data_year , c.uth_member_id , c.member_id_src , claim_month, claim_year
		into dev.am_members_not_enrolled_monthly
		from dev.am_all_members_yearly c
		where mem_not_enrolled is null;
--select count(*) from dev.am_members_not_enrolled_monthly  
--2,637,908
-----------------------------------------------------------------------------------------------------------------------------------------------------	
--get source table from DW
drop table if exists dev.am_member_enrollment_monthly;

select * 
	into dev.am_member_enrollment_monthly 
	from data_warehouse.member_enrollment_monthly;

--drop row_identifier column
ALTER TABLE dev.am_member_enrollment_monthly DROP COLUMN row_identifier;		
------------------------------------------------------------------------------------------------------------------------------------------------------
--insert new data generated by claims	
insert into dev.am_member_enrollment_monthly(data_source, year, month_year_id , uth_member_id , gender_cd , dob_derived , death_date , 
											 claim_created_flag , rx_coverage , data_year, age_derived )
	select distinct y.data_source, n.claim_year , cast(concat(n.claim_year, LPAD(n.claim_month::text, 2,'0')) as int4) as month_year_id,
			y.uth_member_id , y.gender_cd, y.dob_derived, y.death_date, true as claim_created_flag , y.rx_coverage , n.claim_year	as data_year, 		
			case when y.death_date is not null then extract(year from y.death_date) else n.claim_year end - extract(year from dob_derived) as age_derived			
		FROM dev.am_member_enrollment_yearly y, dev.am_members_not_enrolled_monthly n
		where y.uth_member_id = n.uth_member_id 	
			and y.data_source = n.data_source 			
						
--2,065,731			
--select count(*)	from dev.am_member_enrollment_monthly where claim_created_flag = true
------------------------------------------------------------------------------------------------------------------------------------------------------
--update consecutive enrolled sequence number
drop table if exists dev.am_monthly_enrolled_members_by_claims;

select distinct uth_member_id
	into dev.am_monthly_enrolled_members_by_claims
	from dev.am_member_enrollment_monthly
	where claim_created_flag = true;
	
with row_build_cte as ( 
	select uth_member_id, month_year_id  
	      ,row_number() over(partition by uth_member_id, my_grp order by  month_year_id) as in_streak
	from ( 
		   select a.month_year_id
		         ,a.uth_member_id
		         ,b.my_row_counter - row_number() over(partition by a.uth_member_id order by a.month_year_id) as my_grp
		   from dev.am_member_enrollment_monthly 	 a 
   	       join reference_tables.ref_month_year b on a.month_year_id = b.month_year_id 	   		    
		   inner join dev.am_monthly_enrolled_members_by_claims c on c.uth_member_id = a.uth_member_id  
		 ) sub    
) 
update dev.am_member_enrollment_monthly c 
		set consecutive_enrolled_months = d.in_streak 
	from row_build_cte d
	where c.uth_member_id = d.uth_member_id
		and c.month_year_id = d.month_year_id;
------------------------------------------------------------------------------------------------------------------------------------------------------
drop table if exists dev.am_all_members_yearly
drop table if exists dev.am_members_not_enrolled_monthly;
drop table if exists dev.am_monthly_enrolled_members_by_claims;
------------------------------------------------------------------------------------------------------------------------------------------------------												
		
vacuum analyze dev.am_member_enrollment_monthly		 		 

select * from dev.am_member_enrollment_monthly 
	where claim_created_flag = true;
						
-----------------------------------------------------------------------------------------------------------------------------------------------------							
 
	
	
		
	 